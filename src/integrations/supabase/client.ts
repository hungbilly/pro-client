
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://htjvyzmuqsrjpesdurni.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh0anZ5em11cXNyanBlc2R1cm5pIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE0MDg0NTIsImV4cCI6MjA1Njk4NDQ1Mn0.AtFzj0Ail1PgKmXJcPWyWnXqC6EbMP0UOlH4m_rhkq8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Add a debug logging function 
export const logDebug = (message: string, data?: any) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [Supabase Debug] ${message}`, data ? data : '');
};

// Add detailed error logging
export const logError = (message: string, error: any) => {
  const timestamp = new Date().toISOString();
  console.error(`[${timestamp}] [Supabase Error] ${message}`, error);
  
  // Log additional details if available
  if (error?.message) {
    console.error(`Error message: ${error.message}`);
  }
  
  if (error?.code) {
    console.error(`Error code: ${error.code}`);
  }
  
  if (error?.details) {
    console.error(`Error details:`, error.details);
  }
};

// Add data transformation debugging
export const logDataTransformation = (stage: string, data: any) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [Data Transform] ${stage}`, data);
};

// Add date handling debugging
export const logDateProcessing = (context: string, dateInfo: any) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [Date Processing] ${context}`, dateInfo);
};

// Add payment processing debugging
export const logPaymentProcessing = (context: string, paymentInfo: any) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [Payment Processing] ${context}`, paymentInfo);
};

// Helper function to format dates consistently
export const formatDate = (date: Date | string): string => {
  try {
    if (typeof date === 'string') {
      // If it's already a string, make sure it's a valid date
      const parsedDate = new Date(date);
      if (isNaN(parsedDate.getTime())) {
        logError('Invalid date string', { date });
        return '';
      }
      return parsedDate.toISOString();
    } else {
      return date.toISOString();
    }
  } catch (error) {
    logError('Error formatting date', { date, error });
    return '';
  }
};

// Helper function to parse dates safely
export const parseDate = (dateString: string): Date | null => {
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      logError('Invalid date string during parsing', { dateString });
      return null;
    }
    return date;
  } catch (error) {
    logError('Error parsing date', { dateString, error });
    return null;
  }
};

// Export supabase instance
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
